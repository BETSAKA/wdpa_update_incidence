---
title: "Incidence of WDPA update on deforestation statistics in Madagascar"
author: "Florent Bédécarrats"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{js, eval=FALSE}
// WDPA monthly snapshots
var oct_24 = ee.FeatureCollection('WCMC/WDPA/202410/polygons');
var nov_24 = ee.FeatureCollection('WCMC/WDPA/202411/polygons');
var dec_24 = ee.FeatureCollection('WCMC/WDPA/202412/polygons');
var jan_25 = ee.FeatureCollection('WCMC/WDPA/202501/polygons');

var mdgOnly = ee.Filter.stringContains('ISO3', 'MDG');

function clean(fc) {
  return fc.filter(mdgOnly); // keep both Polygon and MultiPolygon
}

var oct_24_mdg = clean(oct_24);
var nov_24_mdg = clean(nov_24);
var dec_24_mdg = clean(dec_24);
var jan_25_mdg = clean(jan_25);

function exportGeoJSON(fc, name) {
  Export.table.toDrive({
    collection: fc,
    description: name,
    fileFormat: 'GeoJSON',
    folder: 'WDPA_exports'
  });
}

exportGeoJSON(oct_24_mdg, 'WDPA_Oct_2024_MDG');
exportGeoJSON(nov_24_mdg, 'WDPA_Nov_2024_MDG');
exportGeoJSON(dec_24_mdg, 'WDPA_Dec_2024_MDG');
exportGeoJSON(jan_25_mdg, 'WDPA_Jan_2025_MDG');

```
WDPA was updated in january 2025. We want to compare Oct. 2024 and July 2025. They have not undergone changes inbetween so the differences in fact concern Dec. 2024 to Jan. 2025.

```{r}
# Install if not present or old
if (!requireNamespace("mapme.biodiversity", quietly = TRUE) ||
    packageVersion("mapme.biodiversity") <= "0.9.4") {
  remotes::install_github("mapme-initiative/mapme.biodiversity",
                          upgrade = "never")
}  

# [1] "0.9.4"
library(tidyverse)
library(tmap)
library(sf)
library(wdpar)
library(mapme.biodiversity)
library(aws.s3)
library(geoarrow)
library(arrow)
library(progressr)
library(units)

dir.create("data")

# Load files downloaded from GEE
save_object(bucket = "projet-betsaka", 
           object = "diffusion/wdpa_compare/gee_snapshots/WDPA_Nov_2024_MDG.geojson",
           file = "data/WDPA_Nov_2024_MDG.geojson",
           region = "")
save_object(bucket = "projet-betsaka", 
           object = "diffusion/wdpa_compare/gee_snapshots/WDPA_Jan_2025_MDG.geojson",
           file = "data/WDPA_Jan_2025_MDG.geojson",
           region = "")


# Read as sf
wdpa_2024 <- st_read("data/WDPA_Nov_2024_MDG.geojson") %>%
  mutate(version = 2024) 
wdpa_2025 <- st_read("data/WDPA_Jan_2025_MDG.geojson") %>%
  mutate(version = 2025) 

# Google earth engine created some geometry collections for a few PAs (7 in 2024)
# We convert them back to multipolygons
gc_to_multipolygon <- function(x) {
  if (st_geometry_type(x) == "GEOMETRYCOLLECTION") {
    polys <- st_collection_extract(x, "POLYGON")
    geom <- st_cast(st_combine(polys), "MULTIPOLYGON") 
    st_geometry(x) <- st_sfc(geom, crs = st_crs(x))
    return(x)
  } else {
    return(x)
  }
}

wdpa_2024 <- wdpa_2024 %>%
  split(seq_len(nrow(.))) %>%              
  map(gc_to_multipolygon) %>%              
  bind_rows()           

wdpa_2025 <- wdpa_2025 %>%
  split(seq_len(nrow(.))) %>%              
  map(gc_to_multipolygon) %>%              
  bind_rows()           


tmap_mode("view")
  tm_shape(wdpa_2024, name = "WDPA 2024 Nov") +
    tm_fill(fill = "blue", fill_alpha = 0.3) +
  tm_shape(wdpa_2025, name = "WDPA 2025 Jan") +
    tm_fill(fill = "red", fill_alpha = 0.3) 
```

We use the package mapme.biodiversity to compute the forest cover loss for each protected area. 

```{r}
wdpa_both <- wdpa_2024 %>%
  select(-GIS_M_AREA, -GIS_AREA) %>%
  rename(PARENT_ISO3 = PARENT_ISO) %>%
  bind_rows(wdpa_2025) %>%
  st_transform(4326) # WGS84

mapme_options(outdir = "/vsis3/projet-betsaka/diffusion/wdpa_compare/mapme")

with_progress({
  wdpa_both_mapme <- wdpa_both %>%
  get_resources(get_gfw_lossyear(), get_gfw_treecover())
})

library(future)
library(tictoc)

plan(multisession, workers = 8)

tic("compute treecover area")
with_progress({
  wdpa_both_mapme <- wdpa_both_mapme %>%
  calc_indicators(calc_treecover_area(years = 2000:2024, min_cover = 30))
})
toc()
# compute treecover area: 191.18 sec elapsed
plan(sequential)

write_rds(wdpa_both_mapme, "data/wdpa_both_mapme.rds")
```


```{r}
# Distances in meters
distances <- c(5000, 10000, 20000)

# Create buffers for each distance
wdpa_buffers <- lapply(distances, function(d) {
  wdpa_both %>%
    st_transform(29702) %>%  # work in meters to avoid distortions
    mutate(
      buffer_km = d / 1000,
      geometry = st_buffer(geometry, d)
    ) %>%
    st_transform(4326)
})

# Combine all buffers into one sf object
wdpa_buffers <- bind_rows(wdpa_buffers)

# Add an identifier for later separation in analyses
wdpa_buffers <- wdpa_buffers %>%
  mutate(id = paste0(NAME, "_buffer_", buffer_km, "km"))

# Set up mapme options for buffers
mapme_options(outdir = "/vsis3/projet-betsaka/diffusion/wdpa_compare/mapme_buffers")

# Download GFW layers for buffered zones
with_progress({
  wdpa_buffers_mapme <- wdpa_buffers %>%
    get_resources(get_gfw_lossyear(), get_gfw_treecover())
})

# Compute deforestation indicators for the buffers
plan(multisession, workers = 8)
tic("compute treecover area buffers")
with_progress({
  wdpa_buffers_mapme <- wdpa_buffers_mapme %>%
    calc_indicators(calc_treecover_area(years = 2000:2024, min_cover = 30))
})
toc()
plan(sequential)

write_rds(wdpa_buffers_mapme, "data/wdpa_buffers_mapme.rds")
```

Compare

```{r}
wdpa_both_stats <- wdpa_both_mapme %>%
  mutate(area_ha = as.numeric(set_units(st_area(.), ha))) %>%
  select(WDPAID, version, assetid, area_ha, treecover_area) %>%
  portfolio_wide() %>%
  st_drop_geometry() %>%
  select(WDPAID, version, area_ha, 
         treecover_ha_2000 = `treecover_area_2000-01-01_treecover_ha`,
         treecover_ha_2024 = `treecover_area_2024-01-01_treecover_ha`) %>%
  mutate(total_defor_pct  = ((treecover_ha_2024 - treecover_ha_2000) / 
                               treecover_ha_2000) * 100) %>%
  select(-starts_with("treecover_ha"))


wdpa_both_wide <- wdpa_both_stats %>%
  mutate(version = paste0("v", version)) %>%
  pivot_wider(
    id_cols = WDPAID,
    names_from = version,
    values_from = c(area_ha, total_defor_pct),
    names_glue = "{.value}_{version}"
  ) %>%
  left_join(wdpa_2024 %>%
              st_drop_geometry() %>%
              select(WDPAID, NAME_2024 = NAME), 
            by = "WDPAID") %>%
  left_join(wdpa_2025 %>%
              st_drop_geometry() %>%
              select(WDPAID, NAME_2025 = NAME, STATUS_2025 = STATUS), 
            by = "WDPAID") %>%
  relocate(starts_with("NAME"), .after = WDPAID) %>%
  filter(STATUS_2025 == "Designated")


wdpa_both_wide <- wdpa_both_stats %>%
  mutate(version = paste0("v", version)) %>%
  pivot_wider(
    id_cols = WDPAID,
    names_from = version,
    values_from = c(area_ha, total_defor_pct),
    names_glue = "{.value}_{version}"
  ) %>%
  left_join(wdpa_2024 %>%
              st_drop_geometry() %>%
              select(WDPAID, NAME_2024 = NAME), 
            by = "WDPAID") %>%
  left_join(wdpa_2025 %>%
              st_drop_geometry() %>%
              select(WDPAID, NAME_2025 = NAME), 
            by = "WDPAID") %>%
  relocate(starts_with("NAME"), .after = WDPAID)

wdpa_diff <- wdpa_both_wide %>%
  mutate(area_ha_diff = 100*(area_ha_v2025 - area_ha_v2024) / area_ha_v2024,
         defor_pct_diff = 100*(total_defor_pct_v2025 - total_defor_pct_v2024) / 
           total_defor_pct_v2024)


wdpa_buffers_stats <- wdpa_buffers_mapme %>%
  select(WDPAID, version, assetid, buffer_km, treecover_area) %>%
  portfolio_wide() %>%
  st_drop_geometry() %>%
  select(WDPAID, version, buffer_km,
         treecover_ha_2000 = `treecover_area_2000-01-01_treecover_ha`,
         treecover_ha_2024 = `treecover_area_2024-01-01_treecover_ha`) %>%
  mutate(total_defor_pct  = ((treecover_ha_2024 - treecover_ha_2000) / 
                               treecover_ha_2000) * 100) %>%
  select(-starts_with("treecover_ha"))


wdpa_buffers_wide <- wdpa_buffers_stats %>% 
  mutate(version = paste0("v", version)) %>%
  pivot_wider(
    id_cols = c(WDPAID, buffer_km),
    names_from = version,
    values_from = total_defor_pct,
    names_glue = "{.value}_{version}"
  ) %>%
  mutate(defor_pct_diff = 100*(total_defor_pct_v2025 - total_defor_pct_v2024) / 
           total_defor_pct_v2024) %>%
  select(-starts_with("total_defor")) %>%
  mutate(buffer_km = paste0(buffer_km, "km")) %>%
  pivot_wider(
    id_cols = WDPAID,
    names_from = buffer_km,
    values_from = defor_pct_diff,
    names_glue = "{.value}_{buffer_km}"
  ) 

wdpa_diff_with_buffers <- wdpa_diff %>%
  left_join(wdpa_buffers_wide, by = "WDPAID")


write_parquet(wdpa_diff_with_buffers, 
              "s3://projet-betsaka/diffusion/wdpa_compare/wdpa_diff_with_buffers.parquet")
```


Compare

