---
title: "Incidence of WDPA update on deforestation statistics in Madagascar"
author: "Florent Bédécarrats"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---


WDPA was updated in january 2025. We want to compare Oct. 2024 and July 2025. They have not undergone changes inbetween so the differences in fact concern Dec. 2024 to Jan. 2025.

```{r}
# Install if not present or old
if (!requireNamespace("mapme.biodiversity", quietly = TRUE) ||
    packageVersion("mapme.biodiversity") <= "0.9.4") {
  remotes::install_github("mapme-initiative/mapme.biodiversity",
                          upgrade = "never")
}  

# [1] "0.9.4"
library(tidyverse)
library(tmap)
library(sf)
library(wdpar)
library(mapme.biodiversity)
library(aws.s3)
library(geoarrow)
library(arrow)
library(progressr)

dir.create("data")

wdpa_2024 <- open_dataset("s3://fbedecarrats/WDPA/parquet/WDPA_2024.parquet") %>%
  filter(ISO3 == "MDG") %>%
  st_as_sf() %>%
  mutate(version = 2024)

save_object(bucket = "projet-betsaka", 
           object = "diffusion/wdpa_compare/WDPA_WDOECM_Jul2025_Public_MDG.zip",
           file = "data/WDPA_WDOECM_Jul2025_Public_MDG.zip",
           region = "")

wdpa_2025 <- wdpa_read("data/WDPA_WDOECM_Jul2025_Public_MDG.zip") %>%
  mutate(version = 2025)

names(wdpa_2025)[!names(wdpa_2025) %in% names(wdpa_2024)]
# [1] "PARENT_ISO3"
names(wdpa_2024)[!names(wdpa_2024) %in% names(wdpa_2025)]
# [1] "GIS_M_AREA" "GIS_AREA"   "PARENT_ISO"

tmap_mode("view")
  tm_shape(wdpa_2024, name = "WDPA 2024") +
    tm_fill(fill = "blue", fill_alpha = 0.3) +
  tm_shape(wdpa_2025, name = "WDPA 2025") +
    tm_fill(fill = "red", fill_alpha = 0.3) 
```

We use the package mapme.biodiversity to compute the forest cover loss for each protected area. 


```{r}
wdpa_both <- wdpa_clean(wdpa_2024) %>%
  select(-GIS_M_AREA, -GIS_AREA) %>%
  rename(PARENT_ISO3 = PARENT_ISO) %>%
  bind_rows(wdpa_clean(wdpa_2025)) %>%
  filter(STATUS == "Designated") %>%
  st_transform(4326) # WGS84

mapme_options(outdir = "/vsis3/projet-betsaka/diffusion/wdpa_compare/mapme")

with_progress({
  wdpa_both_mapme <- wdpa_both %>%
  get_resources(get_gfw_lossyear(), get_gfw_treecover())
})

library(future)
library(tictoc)

plan(multisession, workers = 8)

tic("compute treecover area")
with_progress({
  wdpa_both_mapme <- wdpa_both_mapme %>%
  calc_indicators(calc_treecover_area(years = 2000:2024, min_cover = 30))
})
toc()
# compute treecover area: 191.18 sec elapsed
plan(sequential)

write_rds(wdpa_both_mapme, "data/wdpa_both_mapme.rds")
```


```{r}
# Distances in meters
distances <- c(5000, 10000, 20000)

# Create buffers for each distance
wdpa_buffers <- lapply(distances, function(d) {
  wdpa_both %>%
    st_transform(29702) %>%  # work in meters to avoid distortions
    mutate(
      buffer_km = d / 1000,
      geometry = st_buffer(geometry, d)
    ) %>%
    st_transform(4326)
})

# Combine all buffers into one sf object
wdpa_buffers <- bind_rows(wdpa_buffers)

# Add an identifier for later separation in analyses
wdpa_buffers <- wdpa_buffers %>%
  mutate(id = paste0(NAME, "_buffer_", buffer_km, "km"))

# Set up mapme options for buffers
mapme_options(outdir = "/vsis3/projet-betsaka/diffusion/wdpa_compare/mapme_buffers")

# Download GFW layers for buffered zones
with_progress({
  wdpa_buffers_mapme <- wdpa_buffers %>%
    get_resources(get_gfw_lossyear(), get_gfw_treecover())
})

# Compute deforestation indicators for the buffers
plan(multisession, workers = 8)
tic("compute treecover area buffers")
with_progress({
  wdpa_buffers_mapme <- wdpa_buffers_mapme %>%
    calc_indicators(calc_treecover_area(years = 2000:2024, min_cover = 30))
})
toc()
plan(sequential)

write_rds(wdpa_buffers_mapme, "data/wdpa_buffers_mapme.rds")
```

Compare

```{r}
library(units)

wdpa_both_stats <- wdpa_both_mapme %>%
  mutate(area_ha = as.numeric(set_units(st_area(.), ha))) %>%
  select(WDPAID, version, assetid, area_ha, treecover_area) %>%
  portfolio_wide() %>%
  st_drop_geometry() %>%
  select(WDPAID, version, area_ha, 
         treecover_ha_2000 = `treecover_area_2000-01-01_treecover_ha`,
         treecover_ha_2024 = `treecover_area_2024-01-01_treecover_ha`) %>%
  mutate(total_defor_pct  = ((treecover_ha_2024 - treecover_ha_2000) / 
                               treecover_ha_2000) * 100) %>%
  select(-starts_with("treecover_ha"))


wdpa_both_wide <- wdpa_both_stats %>%
  pivot_wider()

# Compute PA areas  from wdpa_both_mapme
areas_df <- wdpa_both_mapme %>%
  mutate(area_km2 = set_units(st_area(.), km^2)) %>%
  st_drop_geometry() %>%
  group_by(WDPAID, version) %>%
  summarise(total_area_km2 = sum(as.numeric(area_km2)), .groups = "drop") %>%
  mutate(version = as.character(version)) %>%  # ensure text labels for columns
  pivot_wider(
    names_from = version,
    values_from = total_area_km2,
    names_prefix = "area_"      # enforce clean names
  ) %>%
  mutate(
    total_area_2025 = area_2025,
    diff_total_area = 100 * (area_2025 - area_2024) / area_2024
  )

inside_df  <- wdpa_both_mapme  %>%
    st_drop_geometry() %>%
    select(WDPAID, version, treecover_area) %>%
    unnest(treecover_area) %>%
    transmute(
      WDPAID,
      version,
      buffer_km = 0,
      year = as.integer(format(datetime, "%Y")),
      area_ha = value
    )
}

extract_treecover_buffers <- function(df) {
  df %>%
    st_drop_geometry() %>%
    select(WDPAID, version, buffer_km, treecover_area) %>%
    unnest(treecover_area) %>%
    transmute(
      WDPAID,
      version,
      buffer_km,
      year = as.integer(format(datetime, "%Y")),
      area_ha = value
    )
}

inside_df  <- extract_treecover_inside(wdpa_both_mapme)
buffers_df <- extract_treecover_buffers(wdpa_buffers_mapme)

tree_df <- bind_rows(inside_df, buffers_df) %>%
  mutate(buffer = case_when(
    buffer_km == 0  ~ "inside",
    buffer_km == 5  ~ "buffer_5km",
    buffer_km == 10 ~ "buffer_10km",
    buffer_km == 20 ~ "buffer_20km",
    TRUE ~ paste0("buffer_", buffer_km, "km")
  ))

# --- 3. Compute annual average deforestation rates per PA, per buffer, per version ---
rates_df <- tree_df %>%
  filter(year >= 2000, year <= 2024) %>%
  group_by(WDPAID, buffer, version) %>%
  summarise(
    area_2000 = first(area_ha[year == 2000], default = NA_real_),
    area_2024 = first(area_ha[year == 2024], default = NA_real_),
    defor_rate_pct = 100 * (1 - (area_2024 / area_2000)^(1 / (2024 - 2000))),
    .groups = "drop"
  ) %>%
  pivot_wider(
    names_from = c(buffer, version),
    values_from = defor_rate_pct,
    names_glue = "rate_{buffer}_{version}"
  )

# --- 4. Build the final comparison table ---
diff_table <- areas_df %>%
  left_join(rates_df, by = "WDPAID") %>%
  mutate(
    diff_deforrate_inside = rate_inside_2025 - rate_inside_2024,
    diff_deforrate_5km    = rate_buffer_5km_2025 - rate_buffer_5km_2024,
    diff_deforrate_10km   = rate_buffer_10km_2025 - rate_buffer_10km_2024,
    diff_deforrate_20km   = rate_buffer_20km_2025 - rate_buffer_20km_2024
  ) %>%
  select(
    WDPAID,
    total_area_2025,
    diff_total_area,
    diff_deforrate_inside,
    diff_deforrate_5km,
    diff_deforrate_10km,
    diff_deforrate_20km
  )

diff_table

```



Compare

